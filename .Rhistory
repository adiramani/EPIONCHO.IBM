group_by(blindness, avg_mf_gp) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
View(avgMf_prop)
View(blind_prop)
View(avgMf_prop)
View(blind_prop)
d<-data.frame(prob = c(0.0061, 0.0439, 0.0720, 0.0849, 0.1341, 0.1538, 0.20),
mf = c(0, 3, 13, 36, 76, 151, 200))
fit <- glm(prob~log(mf+1), family=gaussian(link="log"), data=d)
newdat <- data.frame(mf=seq(0,10000,1))
out <- predict(fit, newdata= newdat, se.fit=T)
logpred <- data.frame(fit=out$fit, se=out$se.fit, mf=newdat$mf)
logpred <- within(logpred, {
lwr <- fit-1.96*se
upr <- fit+1.96*se
})
pred <- data.frame(fit=exp(logpred$fit), lwr=exp(logpred$lwr), upr=exp(logpred$upr), mf=logpred$mf)
ep_probs <- pred$fit
View(pred)
write.csv(ep_probs, "C:/Users/mad206/OneDrive/EPIONCH-IBM BoD/OAE_probs.csv")
d<-data.frame(prob = c(0.0005, 0.0015, 0.0035, 0.0128, 0.0131, 0.0095, 0.0027),
mf = c(0, 3, 13, 36, 76, 151, 200))
View(d)
fit <- glm(prob~log(mf+1), family=gaussian(link="log"), data=d)
newdat <- data.frame(mf=seq(0,10000,1))
out <- predict(fit, newdata= newdat, se.fit=T)
logpred <- data.frame(fit=out$fit, se=out$se.fit, mf=newdat$mf)
logpred <- within(logpred, {
lwr <- fit-1.96*se
upr <- fit+1.96*se
})
pred <- data.frame(fit=exp(logpred$fit), lwr=exp(logpred$lwr), upr=exp(logpred$upr), mf=logpred$mf)
blind_probs <- pred$fit
write.csv(blind_probs, "C:/Users/mad206/OneDrive/EPIONCH-IBM BoD/blind_probs.csv")
OCP_blindness_cleaned <- read.csv("C:/Users/mad206/OneDrive/EPIONCH-IBM BoD/Blindness code/OCP_blindness_cleaned.csv")
View(OCP_blindness_cleaned)
OCP_blindness_cleaned$country <- as.factor(OCP_blindness_cleaned$country)
OCP_blindness_cleaned$pre.MDA <- as.factor(OCP_blindness_cleaned$pre.MDA)
OCP_blindness_cleaned$pre.MDA2 <- as.factor(OCP_blindness_cleaned$pre.MDA2)
OCP_blind_preMDA2 <- subset(OCP_blindness_cleaned, pre.MDA2 == "yes", select = age:pre.MDA2)
View(OCP_blind_preMDA2)
ggplot(OCP_blind_preMDA2, aes(avg_mf)) +
geom_histogram(binwidth=1)
max(OCP_blind_preMDA2$avg_mf)
ggplot(OCP_blind_preMDA2, aes(avg_mf, fill = country)) +
geom_histogram(binwidth=5)+
facet_wrap(~country)
OCP_blind_preMDA2 <- OCP_blind_preMDA2 %>%
mutate(
#create categories
avg_mf_count_gp = dplyr::case_when(
avg_mf == 0     ~   "0",
avg_mf > 0 & avg_mf <= 5 ~ "0.001 - 5",
avg_mf > 5 & avg_mf <= 20 ~ "5.001 - 20",
avg_mf > 20 & avg_mf <= 50 ~ "20.001 - 50",
avg_mf > 50 & avg_mf <= 100 ~ "50.001 - 100",
avg_mf > 100 & avg_mf <= 200 ~ "100.01 - 200",
avg_mf > 200 & avg_mf <= 400 ~ "200.01 - 400",
avg_mf > 400 ~ "> 400.001"
),
# convert to factor
avg_mf_gp = factor(
avg_mf_count_gp,
level = c("0","0.001 - 5", "5.001 - 20", "20.001 - 50", "50.001 - 100", "100.01 - 200", "200.01 - 400", "> 400.001")
)
)
View(OCP_blind_preMDA2)
ggplot(OCP_blind_preMDA2, aes(avg_mf_gp, fill = country)) +
geom_bar()+
facet_wrap(~country)
ggplot(OCP_blind_preMDA, aes(avg_mf_gp, fill = country)) +
geom_bar()+
facet_wrap(~country)
avgMf_prop2 <-  OCP_blind_preMDA2 %>%
group_by(avg_mf_gp) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
View(avgMf_prop2)
blind_prop2 <-  OCP_blind_preMDA2 %>%
group_by(blindness, avg_mf_gp) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
View(blind_prop2)
d<-data.frame(prob = c(0.0006, 0.002, 0.0047, 0.0165, 0.0172, 0.0125, 0.0033),
mf = c(0, 3, 13, 36, 76, 151, 200))
fit <- nls(y~a*x^2+b*x, data = d, start(a=0, b=0))
fit <- nls(y~a*mf^2+b*mf, data = d, start(a=0, b=0))
View(d)
d <-data.frame(prob = c(0.0006, 0.002, 0.0047, 0.0165, 0.0172, 0.0125, 0.0033),
x = c(0, 3, 13, 36, 76, 151, 200))
fit <- nls(y~a*x^2+b*x, data = d, start(a=0, b=0))
d <-data.frame(prob = c(0.0006, 0.002, 0.0047, 0.0165, 0.0172, 0.0125, 0.0033),
x = c(0, 3, 13, 36, 76, 151, 200))
d <-data.frame(y = c(0.0006, 0.002, 0.0047, 0.0165, 0.0172, 0.0125, 0.0033),
x = c(0, 3, 13, 36, 76, 151, 200))
fit <- nls(y~a*x^2+b*x, data = d, start(a=0, b=0))
View(d)
d <-data.frame(x = c(0, 3, 13, 36, 76, 151, 200),
y = c(0.0006, 0.002, 0.0047, 0.0165, 0.0172, 0.0125, 0.0033))
fit <- nls(y~a*x^2+b*x, data = d, start(a=0, b=0))
df <-data.frame(x = c(0, 3, 13, 36, 76, 151, 200),
y = c(0.0006, 0.002, 0.0047, 0.0165, 0.0172, 0.0125, 0.0033))
fit <- nls(y~a*x^2+b*x, data = df, start(a=0, b=0))
df <-data.frame(x = c(0, 3, 13, 36, 76, 151, 200),
y = c(0.0006, 0.002, 0.0047, 0.0165, 0.0172, 0.0125, 0.0033))
fit <- nls(y~a*x^2+b*x, data = df, start = list(a=0, b=0))
print(fit)
DT.in <- 1/366 #timestep must be one day
treat.len <- 0 #treatment duration in years
treat.strt  = round(0 / (DT.in )); treat.stp = treat.strt + round(treat.len / (DT.in )) #treatment start and stop
DT.in <- 1/366 #timestep must be one day
treat.len <- 25 #treatment duration in years
treat.len <- 15 #treatment duration in years
treat.strt  = round(80 / (DT.in )); treat.stp = treat.strt + round(treat.len / (DT.in )) #treatment start and stop
treat.strt  = round(30 / (DT.in )); treat.stp = treat.strt + round(treat.len / (DT.in )) #treatment start and stop
test.vc.func <- function(vector.control.strt, DT.in, vector.control.duration)
if(!is.na(vector.control.strt)){
vc.iter.strt <- round(vector.control.strt / (DT.in ));
vector.control.stp = vector.control.strt + round(vector.control.duration / (DT.in ))
return(vc.iter.strt, vector.control.stp)
}
vc.test <- test.vc.func(vector.control.start = 1, DT.in = 1/366, vector.control.duration = 20)
vc.test <- test.vc.func(vector.control.strt = 1, DT.in = 1/366, vector.control.duration = 20)
test.vc.func <- function(vector.control.strt, DT.in, vector.control.duration)
if(!is.na(vector.control.strt)){
vc.iter.strt <- round(vector.control.strt / (DT.in ));
vector.control.stp = vector.control.strt + round(vector.control.duration / (DT.in ))
return(c(vc.iter.strt, vector.control.stp))
}
vc.test <- test.vc.func(vector.control.strt = 1, DT.in = 1/366, vector.control.duration = 20)
treat.strt.t  = round(1 / (1/366 ));
treat.stp.t  = 1 + round(treat.strt.t  / (1 / 366 )) #treatment start and stop
treat.stp.t  = 1 + round(20  / (1 / 366 )) #treatment start and stop
vc.test <- test.vc.func(vector.control.strt = NA, DT.in = 1/366, vector.control.duration = 20)
vc.test <- test.vc.func(vector.control.strt = 1, DT.in = 1/366, vector.control.duration = 20)
vc.test[2]
test.vc.ABR.func <- function(vc.iter.strt, vector.control.stp, i, ABR){
if (i >= vc.iter.strt && i < vector.control.stp) {
ABR_updated <- ABR * vector.control.efficacy # multiply ABR by effiacy to reduce ABR during VC
ABR <- ABR_updated
}
m = ABR * ((1/104) / 0.63) # update m
return(c(ABR, m))
}
abr.test <- test.vc.ABR.func(vc.iter.strt = vc.test[1], vector.control.stp = vc.test[2], i = 366, ABR = 20000)
test.vc.ABR.func <- function(vc.iter.strt, vector.control.stp, vector.control.efficacy, i, ABR){
if (i >= vc.iter.strt && i < vector.control.stp) {
ABR_updated <- ABR * vector.control.efficacy # multiply ABR by effiacy to reduce ABR during VC
ABR <- ABR_updated
}
m = ABR * ((1/104) / 0.63) # update m
return(c(ABR, m))
}
abr.test <- test.vc.ABR.func(vc.iter.strt = vc.test[1], vector.control.stp = vc.test[2], vector.control.efficacy = 0.7,
i = 366, ABR = 20000)
abr.test2 <- test.vc.ABR.func(vc.iter.strt = vc.test[1], vector.control.stp = vc.test[2], vector.control.efficacy = 0.7,
i = 365, ABR = 20000)
20000 * ((1/104) / 0.63)
14000 * ((1/104) / 0.63)
library(EPIONCHO.IBM) # when updated/ to install locally
devtools::load_all()
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
DT.in <- 1/366 #timestep must be one day
treat.len <- 0 #treatment duration in years
treat.strt  = round(0 / (DT.in )); treat.stp = treat.strt + round(treat.len / (DT.in )) #treatment start and stop
timesteps = treat.stp + round(80 / (DT.in )) #final duration (3 is number of years after treatment stops to continue running model)
timesteps = treat.stp + round(30 / (DT.in )) #final duration (3 is number of years after treatment stops to continue running model)
gv.trt = 0
trt.int = 0 #treatment interval (years, 0.5 gives biannual)
ABR.in <- 1082 #annual biting rate for mf 50% prevalence with k_E 0.2
output <-  ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
DT = DT.in,
treat.int = trt.int,
treat.prob = 80,
give.treat = gv.trt,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.01, min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3)
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
devtools::load_all()
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
devtools::load_all()
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
debugonce(ep.equi.sim)
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
debugonce(ep.equi.sim)
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
debugonce(ep.equi.sim)
devtools::load_all()
debugonce(ep.equi.sim)
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
devtools::load_all()
debugonce(ep.equi.sim)
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
debugonce(ep.equi.sim)
devtools::load_all()
debugonce(ep.equi.sim)
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
devtools::load_all()
debugonce(ep.equi.sim)
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
devtools::load_all()
debugonce(ep.equi.sim)
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
devtools::load_all()
debugonce(ep.equi.sim)
# ==================================================== #
#     baseline model run                               #
# ==================================================== #
#length of simulation in years
timesteps = 30
#should treatment be given, when and how often
give.treat.in = 0
treat.strt = 1; treat.stp = 16
trt.int = 1
#annual biting rate, which determines infection prevalence
ABR.in = 1082
output_equilibrium <- ep.equi.sim(time.its = timesteps,
ABR = ABR.in,
N.in = 440,
treat.int = trt.int,
treat.prob = 0.65,
give.treat = give.treat.in,
treat.start = treat.strt,
treat.stop = treat.stp,
pnc = 0.05,
min.mont.age = 5,
delta.hz.in = 0.186,
delta.hinf.in = 0.003,
c.h.in = 0.005,
gam.dis.in = 0.3,
run_equilibrium = TRUE,
equilibrium,
print_progress = TRUE)
