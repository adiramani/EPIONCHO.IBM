#   group_by(atrophy, age_cat) %>%
#   summarise(n = n()) %>%
#   mutate(freq = n / sum(n))
LOD_age_prop <- murdoch_data2_endemic %>%
group_by(age_cat) %>%
summarise(x = sum(lod),
n = n(),
prop = sum(lod)/n())
LOD_age_prop_nonend <- murdoch_data2_nonendemic %>%
group_by(age_cat) %>%
summarise(x_nend = sum(lod),
n_nend = n(),
prop_nend = sum(lod)/n())
LOD_df <- data.frame(age_cat = LOD_age_prop$age_cat, x_nend = LOD_age_prop_nonend$x_nend, n_nend = LOD_age_prop_nonend$n_nend,
prop_nend = LOD_age_prop_nonend$prop_nend, x = LOD_age_prop$x, n = LOD_age_prop$n, prop = LOD_age_prop$prop)
LOD_df$adj_prop <- LOD_df$prop - LOD_df$prop_nend
LOD_df$adj_prop <- ifelse(LOD_df$adj_prop < 0, 0, LOD_df$adj_prop)
LOD_df$x_adj <- LOD_df$n * LOD_df$adj_prop
LOD_df$x_adj_rnd <- round(LOD_df$x_adj)
LOD_CI <- binom.confint(x = LOD_df$x_adj_rnd, n = LOD_df$n, conf.level = 0.95, methods = "exact")
LOD_df$lower <- LOD_CI$lower
LOD_df$upper <- LOD_CI$upper
LOD_df$prop_check <- LOD_CI$mean
#LOD_df$sequela1 <- as.factor("LOD")
LOD_df$sequela <- as.factor("RSD")
murdoch_data2_endemic$rsd <- ifelse(murdoch_data2_endemic$apod == 1 | murdoch_data2_endemic$cpod == 1 | murdoch_data2_endemic$lod == 1, 1, 0)
murdoch_data2_nonendemic$rsd <- ifelse(murdoch_data2_nonendemic$apod == 1 | murdoch_data2_nonendemic$cpod == 1 | murdoch_data2_nonendemic$lod == 1, 1, 0)
RSD_age_prop <- murdoch_data2_endemic %>%
group_by(age_cat) %>%
summarise(x = sum(rsd),
n = n(),
prop = sum(rsd)/n())
RSD_age_prop_nonend <- murdoch_data2_nonendemic %>%
group_by(age_cat) %>%
summarise(x_nend = sum(rsd),
n_nend = n(),
prop_nend = sum(rsd)/n())
RSD_df <- data.frame(age_cat = RSD_age_prop$age_cat, x_nend = RSD_age_prop_nonend$x_nend, n_nend = RSD_age_prop_nonend$n_nend,
prop_nend = RSD_age_prop_nonend$prop_nend, x = RSD_age_prop$x, n = RSD_age_prop$n, prop = RSD_age_prop$prop)
RSD_df$adj_prop <- RSD_df$prop - RSD_df$prop_nend
RSD_df$adj_prop <- ifelse(RSD_df$adj_prop < 0, 0, RSD_df$adj_prop)
RSD_df$x_adj <- RSD_df$n * RSD_df$adj_prop
RSD_df$x_adj_rnd <- round(RSD_df$x_adj)
RSD_CI <- binom.confint(x = RSD_df$x_adj_rnd, n = RSD_df$n, conf.level = 0.95, methods = "exact")
RSD_df$lower <- RSD_CI$lower
RSD_df$upper <- RSD_CI$upper
RSD_df$prop_check <- RSD_CI$mean
RSD_df$sequela <- as.factor("RSD")
sequela_df_ageprev <- rbind(SI_df, RSD_df)
sequela_df_ageprev_subset <- subset(sequela_df_ageprev, age_cat != "> 80")
APOD_df1 <- subset(APOD_df, age_cat != "> 80")
CPOD_df1 <- subset(CPOD_df, age_cat != "> 80")
LOD_df1 <- subset(LOD_df, age_cat != "> 80")
require(ggplot2)
base_plot <- ggplot(data = sequela_df_ageprev_subset, aes(x = age_cat, y = adj_prop*100, group = sequela))+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin=lower*100, ymax=upper*100), width = 0.2)+
facet_wrap(~sequela)+
theme_bw()
base_plot_APOD <- base_plot +
geom_line(data = APOD_df1, aes(x = age_cat, y = adj_prop*100, group = sequela), colour = "brown", alpha = 0.5)+
geom_point(data = APOD_df1, aes(x = age_cat, y = adj_prop*100, group = sequela), colour = "brown", alpha = 0.5)+
geom_errorbar(data = APOD_df1, aes(ymin=lower*100, ymax=upper*100), width = 0.2, colour = "brown", alpha = 0.5)+
facet_wrap(~sequela)
base_plot_CPOD <- base_plot_APOD +
geom_line(data = CPOD_df1, aes(x = age_cat, y = adj_prop*100, group = sequela), colour = "purple", alpha = 0.5)+
geom_point(data = CPOD_df1, aes(x = age_cat, y = adj_prop*100, group = sequela), colour = "purple", alpha = 0.5)+
geom_errorbar(data = CPOD_df1, aes(ymin=lower*100, ymax=upper*100), width = 0.2, colour = "purple", alpha = 0.5)+
facet_wrap(~sequela)
base_plot_CPOD +
geom_line(data = LOD_df1, aes(x = age_cat, y = adj_prop*100, group = sequela), colour = "orange", alpha = 0.5)+
geom_point(data = LOD_df1, aes(x = age_cat, y = adj_prop*100, group = sequela), colour = "orange", alpha = 0.5)+
geom_errorbar(data = LOD_df1, aes(ymin=lower*100, ymax=upper*100), width = 0.2, colour = "orange", alpha = 0.5)+
ylab("Adjusted prevalence (%)")+
xlab("Age categories (years)")+
facet_wrap(~sequela)
base_plot_CPOD +
geom_line(data = LOD_df1, aes(x = age_cat, y = adj_prop*100, group = sequela), colour = "orange", alpha = 0.5)+
geom_point(data = LOD_df1, aes(x = age_cat, y = adj_prop*100, group = sequela), colour = "orange", alpha = 0.5)+
geom_errorbar(data = LOD_df1, aes(ymin=lower*100, ymax=upper*100), width = 0.2, colour = "orange", alpha = 0.5)+
ylab("Adjusted prevalence (%)")+
xlab("Age categories (years)")+
#facet_wrap(~sequela)
facet_wrap(~sequela, scales = "free_y")
murdoch_data2$rsd <- ifelse(murdoch_data2$apod == 1 | murdoch_data2$cpod == 1 | murdoch_data2$lod == 1, 1, 0)
RSD1 <- subset(murdoch_data2, rsd == 1 )
rsd_pos_df <- RSD1 %>%
group_by(rsd , mfbin) %>%
summarize(Freq=n())
RSD0 <- subset(murdoch_data2, rsd == 0 )
rsd_neg_df <- RSD0 %>%
group_by(rsd , mfbin) %>%
summarize(Freq=n())
rsd_combined <- cbind(rsd_pos_df, rsd_neg_df)
rsd_combined$tot <- rsd_combined$Freq...3 + rsd_combined$Freq...6
rsd_combined$prop <- rsd_combined$Freq...3 / rsd_combined$tot
rsd_combined$mf <- ifelse(rsd_combined$mfbin...2 == 0, 0,
ifelse(rsd_combined$mfbin...2 == 1, 5,
ifelse(rsd_combined$mfbin...2 == 2, 30,
ifelse(rsd_combined$mfbin...2 == 3, 75, 200))))
fit_rsd <- glm(prop ~ log(mf + 1), family = gaussian(link = "log"),
data = rsd_combined)
# fitted logarithmic relationship between prob OAE ~ mean mf load;
# generalized linear model with log-link function
newdat <- data.frame(mf = seq(0, 1000, 1)) # generate new dataframe with mf counts from 0 to 1000 by 1
out_rsd <- predict(fit_rsd, newdata = newdat, se.fit = T) # use predict function to calculate log(OAE prob) for each mean mf count in newdat
logpred_rsd <- data.frame(fit = out_rsd$fit, se = out_rsd$se.fit, mf = newdat$mf) # create dataframe with predicted log(OAE probs), standard error and mf counts
logpred_rsd <- within(logpred_rsd, {
lwr <- fit - 1.96 * se
upr <- fit + 1.96 * se
}) # calculate lwr and upper confidence intervals for log(OAE probs)
pred_rsd <- data.frame(fit = exp(logpred_rsd$fit), lwr = exp(logpred_rsd$lwr), upr = exp(logpred_rsd$upr), mf = logpred_rsd$mf) # exponentiate probabilities
pred_rsd$sequela <- as.factor("RSD")
#Atrp_probs <- pred$fit # extract probabilities into a vector
require(ggplot2)
ggplot()+
geom_line(data = pred_rsd , aes(x=mf, y=fit), colour = "red")+
geom_line(data = pred_rsd , aes(x=mf, y = lwr), linetype = "dashed")+
geom_line(data = pred_rsd , aes(x=mf, y = upr), linetype = "dashed")+
geom_point( data = rsd_combined, aes(x=mf, y = prop))+
ylab("RSD probability")+
xlim(0,200)+
ylim(0,0.4)+
theme_bw()
# ===============================#
#   stratify by (meso)endemic    #
#murdoch_data2$rsd <- ifelse(murdoch_data2$apod == 1 | murdoch_data2$cpod == 1 | murdoch_data2$lod == 1, 1, 0)
murdoch_data2$rsd <- ifelse(murdoch_data2$apod == 1 | murdoch_data2$cpod == 1 | murdoch_data2$lod == 1, 1, 0)
rsd1_meso <- subset(murdoch_data2, rsd == 1 & mesonon == 1)
rsd_pos_df_meso <- rsd1_meso %>%
group_by(rsd , mfbin) %>%
summarize(Freq=n())
rsd0_meso <- subset(murdoch_data2, rsd == 0 & mesonon == 1)
rsd_neg_df_meso <- rsd0_meso %>%
group_by(rsd , mfbin) %>%
summarize(Freq=n())
rsd_combined_meso <- cbind(rsd_pos_df_meso, rsd_neg_df_meso)
rsd_combined_meso$tot <- rsd_combined_meso$Freq...3 + rsd_combined_meso$Freq...6
rsd_combined_meso$prop <- rsd_combined_meso$Freq...3 / rsd_combined_meso$tot
rsd_combined_meso$mf <- ifelse(rsd_combined_meso$mfbin...2 == 0, 0,
ifelse(rsd_combined_meso$mfbin...2 == 1, 5,
ifelse(rsd_combined_meso$mfbin...2 == 2, 30,
ifelse(rsd_combined_meso$mfbin...2 == 3, 75, 200))))
# divide prob by age
rsd_combined_meso$avg_age <- avgage_mfbin_df_meso$age
# ================================================== #
# average age in each mf bin to divide probabilities #
meso_df <- subset(murdoch_data2, mesonon == 1)
#meso_df <- subset(murdoch_data2, mesonon == 1 & atrophy == 1 & mfbin > 0)
avgage_mfbin_df_meso <- aggregate(age ~ mfbin, data = meso_df, FUN = mean)
#]avgage_mfbin_df_meso <- aggregate(age ~ mfbin, data = meso_df, FUN = function(x) c(Average = mean(x), Count = length(x)))
atrophy_combined_meso$avg_age <- avgage_mfbin_df_meso$age
murdoch_data2$rsd <- ifelse(murdoch_data2$apod == 1 | murdoch_data2$cpod == 1 | murdoch_data2$lod == 1, 1, 0)
RSD1 <- subset(murdoch_data2, rsd == 1 )
rsd_pos_df <- RSD1 %>%
group_by(rsd , mfbin) %>%
summarize(Freq=n())
RSD0 <- subset(murdoch_data2, rsd == 0 )
rsd_neg_df <- RSD0 %>%
group_by(rsd , mfbin) %>%
summarize(Freq=n())
rsd_combined <- cbind(rsd_pos_df, rsd_neg_df)
rsd_combined$tot <- rsd_combined$Freq...3 + rsd_combined$Freq...6
rsd_combined$prop <- rsd_combined$Freq...3 / rsd_combined$tot
rsd_combined$mf <- ifelse(rsd_combined$mfbin...2 == 0, 0,
ifelse(rsd_combined$mfbin...2 == 1, 5,
ifelse(rsd_combined$mfbin...2 == 2, 30,
ifelse(rsd_combined$mfbin...2 == 3, 75, 200))))
fit_rsd <- glm(prop ~ log(mf + 1), family = gaussian(link = "log"),
data = rsd_combined)
# fitted logarithmic relationship between prob OAE ~ mean mf load;
# generalized linear model with log-link function
newdat <- data.frame(mf = seq(0, 1000, 1)) # generate new dataframe with mf counts from 0 to 1000 by 1
out_rsd <- predict(fit_rsd, newdata = newdat, se.fit = T) # use predict function to calculate log(OAE prob) for each mean mf count in newdat
logpred_rsd <- data.frame(fit = out_rsd$fit, se = out_rsd$se.fit, mf = newdat$mf) # create dataframe with predicted log(OAE probs), standard error and mf counts
logpred_rsd <- within(logpred_rsd, {
lwr <- fit - 1.96 * se
upr <- fit + 1.96 * se
}) # calculate lwr and upper confidence intervals for log(OAE probs)
pred_rsd <- data.frame(fit = exp(logpred_rsd$fit), lwr = exp(logpred_rsd$lwr), upr = exp(logpred_rsd$upr), mf = logpred_rsd$mf) # exponentiate probabilities
pred_rsd$sequela <- as.factor("RSD")
#Atrp_probs <- pred$fit # extract probabilities into a vector
require(ggplot2)
ggplot()+
geom_line(data = pred_rsd , aes(x=mf, y=fit), colour = "red")+
geom_line(data = pred_rsd , aes(x=mf, y = lwr), linetype = "dashed")+
geom_line(data = pred_rsd , aes(x=mf, y = upr), linetype = "dashed")+
geom_point( data = rsd_combined, aes(x=mf, y = prop))+
ylab("RSD probability")+
xlim(0,200)+
ylim(0,0.4)+
theme_bw()
#murdoch_data2$rsd <- ifelse(murdoch_data2$apod == 1 | murdoch_data2$cpod == 1 | murdoch_data2$lod == 1, 1, 0)
murdoch_data2$rsd <- ifelse(murdoch_data2$apod == 1 | murdoch_data2$cpod == 1 | murdoch_data2$lod == 1, 1, 0)
rsd1_meso <- subset(murdoch_data2, rsd == 1 & mesonon == 1)
rsd_pos_df_meso <- rsd1_meso %>%
group_by(rsd , mfbin) %>%
summarize(Freq=n())
rsd0_meso <- subset(murdoch_data2, rsd == 0 & mesonon == 1)
rsd_neg_df_meso <- rsd0_meso %>%
group_by(rsd , mfbin) %>%
summarize(Freq=n())
rsd_combined_meso <- cbind(rsd_pos_df_meso, rsd_neg_df_meso)
rsd_combined_meso$tot <- rsd_combined_meso$Freq...3 + rsd_combined_meso$Freq...6
rsd_combined_meso$prop <- rsd_combined_meso$Freq...3 / rsd_combined_meso$tot
rsd_combined_meso$mf <- ifelse(rsd_combined_meso$mfbin...2 == 0, 0,
ifelse(rsd_combined_meso$mfbin...2 == 1, 5,
ifelse(rsd_combined_meso$mfbin...2 == 2, 30,
ifelse(rsd_combined_meso$mfbin...2 == 3, 75, 200))))
# divide prob by age
rsd_combined_meso$avg_age <- avgage_mfbin_df_meso$age
rsd_combined_meso$prop_age_adj <- rsd_combined_meso$prop / rsd_combined_meso$avg_age
# ===================================== #
#   work out in non-endemic communities #
rsd1_nonend <- subset(murdoch_data2, rsd == 1 & mesonon == 0)
rsd_pos_df_nonend <- rsd1_nonend %>%
group_by(rsd) %>%
summarize(Freq=n())
rsd0_nonend <- subset(murdoch_data2, rsd == 0 & mesonon == 0)
rsd_neg_df_nonend <- rsd0_nonend %>%
group_by(rsd) %>%
summarize(Freq=n())
nonend_rsd_prop <- rsd_pos_df_nonend$Freq / (rsd_pos_df_nonend$Freq + rsd_neg_df_nonend$Freq)
nonend_rsd_prop
# divide prob by age
nonend_rsd_prop_adj_age <- nonend_rsd_prop/avg_age_nonend
# average age adjustment in non-endemic #
nonmeso_df <- subset(murdoch_data2, mesonon == 0)
avg_age_nonend <- mean(nonmeso_df$age)
#murdoch_data2$rsd <- ifelse(murdoch_data2$apod == 1 | murdoch_data2$cpod == 1 | murdoch_data2$lod == 1, 1, 0)
murdoch_data2$rsd <- ifelse(murdoch_data2$apod == 1 | murdoch_data2$cpod == 1 | murdoch_data2$lod == 1, 1, 0)
rsd1_meso <- subset(murdoch_data2, rsd == 1 & mesonon == 1)
rsd_pos_df_meso <- rsd1_meso %>%
group_by(rsd , mfbin) %>%
summarize(Freq=n())
rsd0_meso <- subset(murdoch_data2, rsd == 0 & mesonon == 1)
rsd_neg_df_meso <- rsd0_meso %>%
group_by(rsd , mfbin) %>%
summarize(Freq=n())
rsd_combined_meso <- cbind(rsd_pos_df_meso, rsd_neg_df_meso)
rsd_combined_meso$tot <- rsd_combined_meso$Freq...3 + rsd_combined_meso$Freq...6
rsd_combined_meso$prop <- rsd_combined_meso$Freq...3 / rsd_combined_meso$tot
rsd_combined_meso$mf <- ifelse(rsd_combined_meso$mfbin...2 == 0, 0,
ifelse(rsd_combined_meso$mfbin...2 == 1, 5,
ifelse(rsd_combined_meso$mfbin...2 == 2, 30,
ifelse(rsd_combined_meso$mfbin...2 == 3, 75, 200))))
# divide prob by age
rsd_combined_meso$avg_age <- avgage_mfbin_df_meso$age
rsd_combined_meso$prop_age_adj <- rsd_combined_meso$prop / rsd_combined_meso$avg_age
# ===================================== #
#   work out in non-endemic communities #
rsd1_nonend <- subset(murdoch_data2, rsd == 1 & mesonon == 0)
rsd_pos_df_nonend <- rsd1_nonend %>%
group_by(rsd) %>%
summarize(Freq=n())
rsd0_nonend <- subset(murdoch_data2, rsd == 0 & mesonon == 0)
rsd_neg_df_nonend <- rsd0_nonend %>%
group_by(rsd) %>%
summarize(Freq=n())
nonend_rsd_prop <- rsd_pos_df_nonend$Freq / (rsd_pos_df_nonend$Freq + rsd_neg_df_nonend$Freq)
nonend_rsd_prop
# divide prob by age
nonend_rsd_prop_adj_age <- nonend_rsd_prop/avg_age_nonend
nonend_rsd_prop_adj_age
# ===================================== #
#      Adjust probabilities             #
rsd_combined_meso$background_prop <- nonend_rsd_prop
rsd_combined_meso$adj_prop1 <- rsd_combined_meso$prop - rsd_combined_meso$background_prop
rsd_combined_meso$adj_prop2 <- ifelse(rsd_combined_meso$adj_prop1 < 0, 0.00000000001, rsd_combined_meso$adj_prop1)
rsd_combined_meso$adj_prop3 <- rsd_combined_meso$prop * rsd_combined_meso$background_prop
# age divisible probs #
rsd_combined_meso$background_prop_age <- nonend_rsd_prop_adj_age
rsd_combined_meso$adj_prop1_age <- rsd_combined_meso$prop_age_adj - rsd_combined_meso$background_prop_age
rsd_combined_meso$adj_prop2_age <- ifelse(rsd_combined_meso$adj_prop1_age < 0, 0.00000000001, rsd_combined_meso$adj_prop1_age)
rsd_combined_meso$sequela <- as.factor("reactive skin disease")
require(ggplot2)
ggplot()+
geom_point(data = rsd_combined_meso , aes(x=mf, y=prop), colour = "black")+
geom_point(data = rsd_combined_meso , aes(x=mf, y=adj_prop2), colour = "brown")+
geom_point(data = rsd_combined_meso , aes(x=mf, y=adj_prop3), colour = "purple")+
#geom_point( data = atrophy_combined, aes(x=mf, y = prop))+
ylab("RSD probability")+
xlim(0,200)+
ylim(0,0.4)+
theme_bw()
fit_rsd0 <- glm(prop ~ log(mf + 1), family = gaussian(link = "log"),
data = rsd_combined_meso)
# fitted logarithmic relationship between prob OAE ~ mean mf load;
# generalized linear model with log-link function
newdat <- data.frame(mf = seq(0, 1000, 1)) # generate new dataframe with mf counts from 0 to 1000 by 1
out_rsd0 <- predict(fit_rsd0, newdata = newdat, se.fit = T) # use predict function to calculate log(OAE prob) for each mean mf count in newdat
logpred_rsd0 <- data.frame(fit = out_rsd0$fit, se = out_rsd0$se.fit, mf = newdat$mf) # create dataframe with predicted log(OAE probs), standard error and mf counts
logpred_rsd0 <- within(logpred_rsd0, {
lwr <- fit - 1.96 * se
upr <- fit + 1.96 * se
}) # calculate lwr and upper confidence intervals for log(OAE probs)
pred_rsd0 <- data.frame(fit = exp(logpred_rsd0$fit), lwr = exp(logpred_rsd0$lwr), upr = exp(logpred_rsd0$upr), mf = logpred_rsd0$mf) # exponentiate probabilities
pred_rsd0$sequela <- as.factor("reactive skin disease")
# adjusted prop 1 #
fit_rsd1 <- glm(adj_prop2 ~ log(mf + 1), family = gaussian(link = "log"),
data = rsd_combined_meso)
# fitted logarithmic relationship between prob OAE ~ mean mf load;
# generalized linear model with log-link function
newdat <- data.frame(mf = seq(0, 1000, 1)) # generate new dataframe with mf counts from 0 to 1000 by 1
out_rsd1 <- predict(fit_rsd1, newdata = newdat, se.fit = T) # use predict function to calculate log(OAE prob) for each mean mf count in newdat
logpred_rsd1 <- data.frame(fit = out_rsd1$fit, se = out_rsd1$se.fit, mf = newdat$mf) # create dataframe with predicted log(OAE probs), standard error and mf counts
logpred_rsd1 <- within(logpred_rsd1, {
lwr <- fit - 1.96 * se
upr <- fit + 1.96 * se
}) # calculate lwr and upper confidence intervals for log(OAE probs)
pred_rsd1 <- data.frame(fit = exp(logpred_rsd1$fit), lwr = exp(logpred_rsd1$lwr), upr = exp(logpred_rsd1$upr), mf = logpred_rsd1$mf) # exponentiate probabilities
pred_rsd1$sequela <- as.factor("reactive skin disease")
# adjusted prop 2 #
fit_rsd2 <- glm(adj_prop3 ~ log(mf + 1), family = gaussian(link = "log"),
data = rsd_combined_meso)
# fitted logarithmic relationship between prob OAE ~ mean mf load;
# generalized linear model with log-link function
newdat <- data.frame(mf = seq(0, 1000, 1)) # generate new dataframe with mf counts from 0 to 1000 by 1
out_rsd2 <- predict(fit_rsd2, newdata = newdat, se.fit = T) # use predict function to calculate log(OAE prob) for each mean mf count in newdat
logpred_rsd2 <- data.frame(fit = out_rsd2$fit, se = out_rsd2$se.fit, mf = newdat$mf) # create dataframe with predicted log(OAE probs), standard error and mf counts
logpred_rsd2 <- within(logpred_rsd2, {
lwr <- fit - 1.96 * se
upr <- fit + 1.96 * se
}) # calculate lwr and upper confidence intervals for log(OAE probs)
pred_rsd2 <- data.frame(fit = exp(logpred_rsd2$fit), lwr = exp(logpred_rsd2$lwr), upr = exp(logpred_rsd2$upr), mf = logpred_rsd2$mf) # exponentiate probabilities
pred_rsd2$sequela <- as.factor("reactive skin disease")
# age divided probabilites (& adjusted on background probs from non-endemic communities) #
fit_rsd3 <- glm(adj_prop2_age ~ log(mf + 1), family = gaussian(link = "log"),
data = rsd_combined_meso)
# fitted logarithmic relationship between prob OAE ~ mean mf load;
# generalized linear model with log-link function
newdat <- data.frame(mf = seq(0, 1000, 1)) # generate new dataframe with mf counts from 0 to 1000 by 1
out_rsd3 <- predict(fit_rsd3, newdata = newdat, se.fit = T) # use predict function to calculate log(OAE prob) for each mean mf count in newdat
logpred_rsd3 <- data.frame(fit = out_rsd3$fit, se = out_rsd3$se.fit, mf = newdat$mf) # create dataframe with predicted log(OAE probs), standard error and mf counts
logpred_rsd3 <- within(logpred_rsd3, {
lwr <- fit - 1.96 * se
upr <- fit + 1.96 * se
}) # calculate lwr and upper confidence intervals for log(OAE probs)
pred_rsd3 <- data.frame(fit = exp(logpred_rsd3$fit), lwr = exp(logpred_rsd3$lwr), upr = exp(logpred_rsd3$upr), mf = logpred_rsd3$mf) # exponentiate probabilities
pred_rsd3$sequela <- as.factor("reactive skin disease")
require(ggplot2)
ggplot()+
geom_line(data = pred_rsd0 , aes(x=mf, y=fit), colour = "grey")+
#geom_line(data = pred_atrp0 , aes(x=mf, y = lwr),  colour = "grey", linetype = "dashed")+
#geom_line(data = pred_atrp0 , aes(x=mf, y = upr),  colour = "grey", linetype = "dashed")+
geom_point(data = rsd_combined_meso , aes(x=mf, y=prop), colour = "grey")+
geom_line(data = pred_rsd1 , aes(x=mf, y=fit), colour = "brown")+
#geom_line(data = pred_atrp1 , aes(x=mf, y = lwr),  colour = "brown", linetype = "dashed")+
#geom_line(data = pred_atrp1 , aes(x=mf, y = upr),  colour = "brown", linetype = "dashed")+
geom_point(data = rsd_combined_meso , aes(x=mf, y=adj_prop2), colour = "brown")+
geom_line(data = pred_rsd2 , aes(x=mf, y=fit), colour = "purple")+
#geom_line(data = pred_atrp2 , aes(x=mf, y = lwr),  colour = "purple", linetype = "dashed")+
#geom_line(data = pred_atrp2 , aes(x=mf, y = upr),  colour = "purple", linetype = "dashed")+
geom_point(data = rsd_combined_meso , aes(x=mf, y=adj_prop3), colour = "purple")+
ylab("RSD probability")+
xlim(0,200)+
ylim(0,0.4)+
theme_bw()
names(murdoch_data2)
#murdoch_data2$rsd <- ifelse(murdoch_data2$apod == 1 | murdoch_data2$cpod == 1 | murdoch_data2$lod == 1, 1, 0)
APOD1 <- subset(murdoch_data2, apod == 1 )
APOD_pos_df <- APOD1 %>%
group_by(apod , mfbin) %>%
summarize(Freq=n())
APOD_pos_df
APOD0 <- subset(murdoch_data2, apod == 0 )
APOD0 <- subset(murdoch_data2, apod == 0 )
APOD_neg_df <- APOD0 %>%
group_by(apod , mfbin) %>%
summarize(Freq=n())
APOD_combined <- cbind(APOD_pos_df, APOD_neg_df)
APOD_combined
View(murdoch_data)
test <- read.csv("C:/Users/mad206/OneDrive - Imperial College London/NTD-MC current/EPIONCH-IBM BoD/python model outputs/test.csv")
View(test)
View(test)
test_finalyr <- subset(test, year_id == 99)
View(test_finalyr)
test_atrophy <- subset(test_finalyr, measure == "Atrophy" & age_start => 6 & age_end <= 80)
test_atrophy <- subset(test_finalyr, measure == "Atrophy" & age_start >= 6 & age_end <= 80)
View(test_atrophy)
df <- test_atrophy
View(df)
df <- df %>% mutate_all(function(x) ifelse(is.nan(x), NA, x))
library(dplyr)
df <- df %>% mutate_all(function(x) ifelse(is.nan(x), NA, x))
View(df)
#average across draws
mnp <-  apply(df[,5:ncol(df)],1,mean, na.rm=T)
# add mean prev back to main variables
df <- cbind(df[,1:4], mnp)
View(df)
df <- aggregate(mnp~year_id, FUN=mean, data=df)
View(df)
# ======= #
# Atrophy #
test_atrophy <- subset(test_finalyr, measure == "Atrophy" & age_start >= 6 & age_end <= 80)
df <- test_atrophy
# set NaNs to Nas
df <- df %>% mutate_all(function(x) ifelse(is.nan(x), NA, x))
#average across draws
mnp <-  apply(df[,5:ncol(df)],1,mean, na.rm=T)
# add mean prev back to main variables
df <- cbind(df[,1:4], mnp)
df_atrp <- aggregate(mnp~year_id, FUN=mean, data=df)
View(df)
test_depgm <- subset(test_finalyr, measure == "Depigmentation" & age_start >= 6 & age_end <= 80)
df2 <- test_depgm
# set NaNs to Nas
df2 <- df2 %>% mutate_all(function(x) ifelse(is.nan(x), NA, x))
#average across draws
mnp <-  apply(df2[,5:ncol(df2)],1,mean, na.rm=T)
# add mean prev back to main variables
df2 <- cbind(df2[,1:4], mnp)
df_depgm <- aggregate(mnp~year_id, FUN=mean, data=df2)
View(df_depgm)
View(df_atrp)
test_hg <- subset(test_finalyr, measure == "HangingGroin" & age_start >= 6 & age_end <= 80)
df3 <- test_hg
# set NaNs to Nas
df3 <- df3 %>% mutate_all(function(x) ifelse(is.nan(x), NA, x))
#average across draws
mnp <-  apply(df3[,5:ncol(df3)],1,mean, na.rm=T)
# add mean prev back to main variables
df3 <- cbind(df3[,1:4], mnp)
df_hg <- aggregate(mnp~year_id, FUN=mean, data=df3)
View(df_hg)
View(test_depgm)
View(df_depgm)
View(df_atrp)
test_allmorb <- subset(test_finalyr, measure == c("SevereItching","RSDSimple","Atrophy","Depigmentation","HangingGroin","Blindness","VisualImpairment")
& age_start >= 6 & age_end <= 80)
test_allmorb <- subset(test_finalyr, measure = c("SevereItching","RSDSimple","Atrophy","Depigmentation","HangingGroin","Blindness","VisualImpairment")
& age_start >= 6 & age_end <= 80)
View(test_allmorb)
test_allmorb <- subset(test_finalyr, measure == c("SevereItching","RSDSimple","Atrophy","Depigmentation","HangingGroin","Blindness","VisualImpairment")
& age_start >= 6 & age_end <= 80)
test_allmorb <- subset(test_finalyr, measure %in% c("SevereItching","RSDSimple","Atrophy","Depigmentation","HangingGroin","Blindness","VisualImpairment")
& age_start >= 6 & age_end <= 80)
View(test_allmorb)
df <- test_allmorb
# set NaNs to Nas
df <- df %>% mutate_all(function(x) ifelse(is.nan(x), NA, x))
View(df)
#average across draws
mnp <-  apply(df[,5:ncol(df)],1,mean, na.rm=T)
# add mean prev back to main variables
df <- cbind(df[,1:4], mnp)
View(df)
df_all <- aggregate(mnp~measure, FUN=mean, data=df)
View(df_all)
View(test_depgm)
View(df_depgm)
?write.csv
write.csv(df_all, "python_morbidity_out_ABR2297.csv")
View(test)
test_prev <- subset(test_finalyr, measure == "prevalence" & age_start >= 6 & age_end <= 80)
df3 <- test_prev
# set NaNs to Nas
df3 <- df3 %>% mutate_all(function(x) ifelse(is.nan(x), NA, x))
test_prev <- subset(test_finalyr, measure == "prevalence" & age_start >= 6 & age_end <= 80)
df3 <- test_prev
View(df3)
# set NaNs to Nas
df3 <- df3 %>% mutate_all(function(x) ifelse(is.nan(x), NA, x))
#average across draws
mnp <-  apply(df3[,5:ncol(df3)],1,mean, na.rm=T)
# add mean prev back to main variables
df3 <- cbind(df3[,1:4], mnp)
df_prev <- aggregate(mnp~year_id, FUN=mean, data=df3)
View(df_prev)
modelled_meanprevruns <- readRDS("C:/Users/mad206/OneDrive - Imperial College London/NTD-MC current/EPIONCH-IBM BoD/Skin disease/model_processed_runs/saved_run_prev_means_morbidity.rds")
# prev runs from cluster - with blindness #
modelled_meanprevvals <- readRDS("C:/Users/mad206/OneDrive - Imperial College London/NTD-MC current/EPIONCH-IBM BoD/Skin disease/model_processed_runs/saved_run_meanval_allmorbidity.rds")
View(modelled_meanprevvals)
timesteps = 100 # should be 132 yrs each scenario
treat.strt = 0;
#treat.stp.a = total.no.yrs # run to 2040 (i.e. start at 80yrs + 52 yrs)
#treat.stp.b =  total.no.yrs # run to 2040 (i.e. start at 80yrs + 52 yrs) but will bennial freq
#treat.stp.c = 81 + length(treat.timing.hist.yrs.in)
gv.trt = 1
# other inputs required to make dataframe for iters #
DT.in <- 1/366 #timestep must be one day
# timesteps.iter <- round(total.no.yrs / (DT.in )) #final duration (10 here is 10 years after treatment stops to run model)
# for model where kM is set to a constant (15) (for kE values of 0.3 and associated DD pars)
abr30 = 294 # 30% mf prev
abr50 = 607 # 50% mf prev
abr60 = 1082 # 60% mf prev
abr70 = 2297 # 70% mf prev
abr80 = 6969 # 80% mf prev
#abr_ches = 41922 # chesnais ABR
abr <- c(abr30, abr50, abr60, abr70, abr80)
# abr <- abr60
num_repeats_each_ABR <- 500 # number of times repeat each ABR input
tot_abr <- rep(abr, each = num_repeats_each_ABR) # vector of all ABR values to test
k_e <- 0.3 # 3rd par
tot_k_e <- rep(k_e, each = num_repeats_each_ABR * 5)
inds_reps <- rep(seq(1, num_repeats_each_ABR), length(tot_abr)/num_repeats_each_ABR) # repeating sequence of 1: num repeats, number of combo times
temp_tot_parms <- data.frame(Var1 = tot_abr, Var2 = tot_k_e)
# dH0_kE0.3 <- rep(0.186, 800)
# dHinf_kE0.3 <- rep(0.003, 800)
# cH_kE0.3 <- rep(0.005, 800)
dH0_kE0.3 <- rep(0.186, 500)
dHinf_kE0.3 <- rep(0.003, 500)
cH_kE0.3 <- rep(0.005, 500)
temp_tot_parms$Var3 <- dH0_kE0.3
temp_tot_parms$Var4 <- dHinf_kE0.3
temp_tot_parms$Var5 <- cH_kE0.3
# recombine into one master dataframe
#tot_parms <- rbind(temp_tot_parms1, temp_tot_parms2)
tot_parms <- temp_tot_parms
